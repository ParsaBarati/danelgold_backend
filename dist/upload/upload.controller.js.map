{"version":3,"sources":["../../src/upload/upload.controller.ts"],"sourcesContent":["import { UploadService } from './upload.service';\r\nimport {\r\n    Controller,\r\n    DefaultValuePipe,\r\n    Delete,\r\n    Get,\r\n    HttpStatus,\r\n    NotFoundException,\r\n    Param,\r\n    ParseFilePipeBuilder,\r\n    ParseIntPipe,\r\n    Post,\r\n    Query,\r\n    Req,\r\n    Res,\r\n    UploadedFile,\r\n    UploadedFiles,\r\n    UseInterceptors,\r\n} from '@nestjs/common';\r\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\r\nimport path from 'path';\r\nimport { Request, Response } from 'express';\r\nimport { Public } from '@/common/decorators/public.decorator';\r\nimport { ApiOperation, ApiQuery, ApiTags, ApiOkResponse } from '@nestjs/swagger';\r\n\r\n@ApiTags('Uploads')\r\n@Controller('upload')\r\nexport class UploadController {\r\n    constructor(private readonly uploadService: UploadService) {}\r\n\r\n    @ApiOperation({ summary: 'Upload Multiple Files in Bulk' })\r\n    @Post('bulk')\r\n    @UseInterceptors(FilesInterceptor('files'))\r\n    async createUploads(\r\n        @UploadedFiles(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 500 * 1024 * 1024, // 500MB max file size\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        ) files: Express.Multer.File[],\r\n    ) {\r\n        return await this.uploadService.createUploads(files);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Upload Single File' })\r\n    @Post()\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 5 * 1024 * 1024, // 5MB max file size\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        ) file: Express.Multer.File,\r\n    ) {\r\n        return await this.uploadService.createUpload(file);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Upload Profile Picture' })\r\n    @Post('profile-pic')\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createProfilePictureUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 5 * 1024 * 1024, // 5MB max file size\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        ) file: Express.Multer.File,\r\n        @Req() req: Request,\r\n    ) {\r\n        return await this.uploadService.createProfilePictureUpload(file, req.user as any);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Get All Uploads with Filtering Options' })\r\n    @ApiQuery({ name: 'page', required: false, example: 1, description: 'Page number for pagination' })\r\n    @ApiQuery({ name: 'limit', required: false, example: 10, description: 'Number of items per page' })\r\n    @ApiQuery({ name: 'search', required: false, description: 'Search term to filter uploads' })\r\n    @ApiQuery({ name: 'sort', required: false, description: 'Sort by a specific field', example: 'id' })\r\n    @ApiQuery({ name: 'sortOrder', required: false, description: 'Order of sorting', example: 'DESC' })\r\n    @Get('all')\r\n    async getAllUploads(\r\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n        @Query('search') search?: string,\r\n        @Query('sort', new DefaultValuePipe('id')) sort?: string,\r\n        @Query('sortOrder', new DefaultValuePipe('DESC')) sortOrder?: string,\r\n    ) {\r\n        const query = { page, limit, search, sort, sortOrder };\r\n        return this.uploadService.getAllUploads(query);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Delete an Upload by ID' })\r\n    @ApiOkResponse({ description: 'Upload deleted successfully' })\r\n    @Delete(':id')\r\n    async deleteUpload(@Param('id', ParseIntPipe) id: number) {\r\n        return this.uploadService.deleteUpload(id);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Delete Multiple Uploads' })\r\n    @ApiQuery({ name: 'delete', description: 'Comma-separated list of IDs to delete' })\r\n    @Delete()\r\n    async deleteMultipleUploads(@Query('delete') ids: string) {\r\n        const idArray = ids.split(',').map((id) => parseInt(id, 10));\r\n        return this.uploadService.deleteMultipleUploads(idArray);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Get File by Path' })\r\n    @Public()\r\n    @Get('/path/:filePath')\r\n    async getByPath(@Param('filePath') filePath: string, @Res() res: Response) {\r\n        const filePathClean = path.normalize(filePath).replace(/\\\\/g, '/');\r\n        const file = await this.uploadService.getUploadByPath(filePathClean);\r\n        if (!file) {\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const absolutePath = path.resolve(__dirname, '..', '..', file.result);\r\n        res.sendFile(absolutePath);\r\n    }\r\n\r\n    @ApiOperation({ summary: 'Get Upload by ID' })\r\n    @Get(':id')\r\n    async getUploadById(\r\n        @Param(\r\n            'id',\r\n            new ParseIntPipe({\r\n                errorHttpStatusCode: HttpStatus.BAD_REQUEST,\r\n            }),\r\n        ) uploadId: number,\r\n    ) {\r\n        return await this.uploadService.getUploadById(uploadId);\r\n    }\r\n}\r\n"],"names":["UploadController","createUploads","files","uploadService","createUpload","file","createProfilePictureUpload","req","user","getAllUploads","page","limit","search","sort","sortOrder","query","deleteUpload","id","deleteMultipleUploads","ids","idArray","split","map","parseInt","getByPath","filePath","res","filePathClean","path","normalize","replace","getUploadByPath","NotFoundException","absolutePath","resolve","__dirname","result","sendFile","getUploadById","uploadId","constructor","summary","ParseFilePipeBuilder","addMaxSizeValidator","maxSize","build","errorHttpStatusCode","HttpStatus","UNPROCESSABLE_ENTITY","name","required","example","description","DefaultValuePipe","ParseIntPipe","BAD_REQUEST"],"mappings":"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"}