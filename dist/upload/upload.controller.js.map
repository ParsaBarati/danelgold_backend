{"version":3,"sources":["../../src/upload/upload.controller.ts"],"sourcesContent":["import {UploadService} from './upload.service';\r\nimport {\r\n    Controller,\r\n    DefaultValuePipe,\r\n    Delete,\r\n    Get,\r\n    HttpStatus,\r\n    NotFoundException,\r\n    Param,\r\n    ParseFilePipeBuilder,\r\n    ParseIntPipe,\r\n    Post,\r\n    Query,\r\n    Req,\r\n    Res,\r\n    UploadedFile,\r\n    UseInterceptors,\r\n} from '@nestjs/common';\r\nimport {FileInterceptor} from '@nestjs/platform-express';\r\nimport path from 'path';\r\nimport {Request, Response} from 'express';\r\nimport {Public} from '@/common/decorators/public.decorator';\r\nimport {ApiExcludeController, ApiQuery} from '@nestjs/swagger';\r\n\r\n@Controller('upload')\r\nexport class UploadController {\r\n    constructor(private readonly uploadService: UploadService) {\r\n    }\r\n\r\n    @Post()\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 5 * 1024 * 1024, //b/kb/mb\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        )\r\n            file: Express.Multer.File,\r\n    ) {\r\n        return await this.uploadService.createUpload(file);\r\n    }\r\n\r\n    @Post('profile-pic')\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createProfilePictureUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 5 * 1024 * 1024, //b/kb/mb\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        )\r\n            file: Express.Multer.File,\r\n        @Req() req: Request,\r\n    ) {\r\n        return await this.uploadService.createProfilePictureUpload(file, req.user as any);\r\n    }\r\n\r\n    @ApiQuery({name: 'page', required: false})\r\n    @ApiQuery({name: 'limit', required: false})\r\n    @ApiQuery({name: 'search', required: false})\r\n    @ApiQuery({name: 'sort', required: false})\r\n    @ApiQuery({name: 'sortOrder', required: false})\r\n    @Get('all')\r\n    async getAllUploads(\r\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n        @Query('search') search?: string,\r\n        @Query('sort', new DefaultValuePipe('id')) sort?: string,\r\n        @Query('sortOrder', new DefaultValuePipe('DESC')) sortOrder?: string,\r\n    ) {\r\n        const query = {page, limit, search, sort, sortOrder};\r\n        return this.uploadService.getAllUploads(query);\r\n    }\r\n\r\n    @Delete(':id')\r\n    async deleteUpload(\r\n        @Param('id') id: number\r\n    ) {\r\n        return this.uploadService.deleteUpload(id);\r\n    }\r\n\r\n    @Delete('')\r\n    async deleteMultipleUploads(\r\n        @Query('delete') ids: string,\r\n    ) {\r\n        const idArray = ids.split(',').map((id) => parseInt(id, 10));\r\n        return this.uploadService.deleteMultipleUploads(idArray);\r\n    }\r\n\r\n    @Public()\r\n    @Get('/path/:filePath')\r\n    async getByPath(\r\n        @Param('filePath') filePath: string,\r\n        @Res() res: Response\r\n    ) {\r\n        const filePathClean = filePath.replace(/\\\\/g, '/');\r\n        const file = await this.uploadService.getUploadByPath(filePathClean);\r\n        if (!file) {\r\n            throw new NotFoundException('فایلی پیدا نشد');\r\n        }\r\n        const absolutePath = path.resolve(__dirname, '..', '..', file.result);\r\n        // ارسال فایل\r\n        res.sendFile(absolutePath);\r\n    }\r\n\r\n    @Get(':id')\r\n    async getUploadById(\r\n        @Param(\r\n            'id',\r\n            new ParseIntPipe({\r\n                errorHttpStatusCode: HttpStatus.BAD_REQUEST,\r\n            }),\r\n        )\r\n            uploadId: number,\r\n    ) {\r\n        return await this.uploadService.getUploadById(uploadId);\r\n    }\r\n}\r\n"],"names":["UploadController","createUpload","file","uploadService","createProfilePictureUpload","req","user","getAllUploads","page","limit","search","sort","sortOrder","query","deleteUpload","id","deleteMultipleUploads","ids","idArray","split","map","parseInt","getByPath","filePath","res","filePathClean","replace","getUploadByPath","NotFoundException","absolutePath","path","resolve","__dirname","result","sendFile","getUploadById","uploadId","constructor","ParseFilePipeBuilder","addMaxSizeValidator","maxSize","build","errorHttpStatusCode","HttpStatus","UNPROCESSABLE_ENTITY","name","required","DefaultValuePipe","ParseIntPipe","BAD_REQUEST"],"mappings":";;;;+BAyBaA;;;eAAAA;;;+BAzBe;wBAiBrB;iCACuB;6DACb;yBACe;iCACX;yBACwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGtC,IAAA,AAAMA,mBAAN,MAAMA;IAMHC,aACF,AASIC,IAAyB;;eAZjC,oBAAA;YAcI,OAAO,MAAM,MAAKC,aAAa,CAACF,YAAY,CAACC;QACjD;;IAIME,2BACF,AASIF,IAAyB,EAC7B,AAAOG,GAAY;;eAbvB,oBAAA;YAeI,OAAO,MAAM,MAAKF,aAAa,CAACC,0BAA0B,CAACF,MAAMG,IAAIC,IAAI;QAC7E;;IAQMC,cACF,AAAsDC,IAAY,EAClE,AAAwDC,KAAa,EACrE,AAAiBC,MAAe,EAChC,AAA2CC,IAAa,EACxD,AAAkDC,SAAkB;;eAXxE,oBAAA;YAaI,MAAMC,QAAQ;gBAACL;gBAAMC;gBAAOC;gBAAQC;gBAAMC;YAAS;YACnD,OAAO,MAAKT,aAAa,CAACI,aAAa,CAACM;QAC5C;;IAGMC,aACF,AAAaC,EAAU;;eAF3B,oBAAA;YAII,OAAO,MAAKZ,aAAa,CAACW,YAAY,CAACC;QAC3C;;IAGMC,sBACF,AAAiBC,GAAW;;eAFhC,oBAAA;YAII,MAAMC,UAAUD,IAAIE,KAAK,CAAC,KAAKC,GAAG,CAAC,CAACL,KAAOM,SAASN,IAAI;YACxD,OAAO,MAAKZ,aAAa,CAACa,qBAAqB,CAACE;QACpD;;IAIMI,UACF,AAAmBC,QAAgB,EACnC,AAAOC,GAAa;;eAJxB,oBAAA;YAMI,MAAMC,gBAAgBF,SAASG,OAAO,CAAC,OAAO;YAC9C,MAAMxB,OAAO,MAAM,MAAKC,aAAa,CAACwB,eAAe,CAACF;YACtD,IAAI,CAACvB,MAAM;gBACP,MAAM,IAAI0B,yBAAiB,CAAC;YAChC;YACA,MAAMC,eAAeC,aAAI,CAACC,OAAO,CAACC,WAAW,MAAM,MAAM9B,KAAK+B,MAAM;YACpE,aAAa;YACbT,IAAIU,QAAQ,CAACL;QACjB;;IAGMM,cACF,AAMIC,QAAgB;;eARxB,oBAAA;YAUI,OAAO,MAAM,MAAKjC,aAAa,CAACgC,aAAa,CAACC;QAClD;;IAjGAC,YAAY,AAAiBlC,aAA4B,CAAE;aAA9BA,gBAAAA;IAC7B;AAiGJ;;;;+CA3FgBmC,4BAAoB,GACnBC;QACGC,SAAS,IAAI,OAAO;OAEvBC;QACGC,qBAAqBC,kBAAU,CAACC,oBAAoB;;;;yDAG9C,yCAAA,OAAO,wCAAP,OAAO;;;;;;;+CASjBN,4BAAoB,GACnBC;QACGC,SAAS,IAAI,OAAO;OAEvBC;QACGC,qBAAqBC,kBAAU,CAACC,oBAAoB;;;;;yDAG9C,yCAAA,OAAO,wCAAP,OAAO;;;;;;;QAMlBC,MAAM;QAAQC,UAAU;;;QACxBD,MAAM;QAASC,UAAU;;;QACzBD,MAAM;QAAUC,UAAU;;;QAC1BD,MAAM;QAAQC,UAAU;;;QACxBD,MAAM;QAAaC,UAAU;;;gDAGjBC,wBAAgB,CAAC;iDAChBA,wBAAgB,CAAC;;gDAElBA,wBAAgB,CAAC;qDACZA,wBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAyCjCC,oBAAY,CAAC;QACbN,qBAAqBC,kBAAU,CAACM,WAAW;IAC/C"}