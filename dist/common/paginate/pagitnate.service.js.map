{"version":3,"sources":["../../../src/common/paginate/pagitnate.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { SelectQueryBuilder, Repository } from 'typeorm';\n\nexport interface PaginationResult<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n@Injectable()\nexport class PaginationService {\n  async paginate<T>(\n    source: Repository<T> | SelectQueryBuilder<T>,\n    page: number = 1,\n    limit: number = 10,\n    where: any = {},\n    order: any = {},\n  ): Promise<PaginationResult<T>> {\n    let data: T[];\n    let total: number;\n\n    if (source instanceof Repository) {\n      [data, total] = await source.findAndCount({\n        where,\n        skip: (page - 1) * limit,\n        take: limit,\n        order,\n      });\n    } else {\n      [data, total] = await source\n        .skip((page - 1) * limit)\n        .take(limit)\n        .getManyAndCount();\n    }\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n}\n"],"names":["PaginationService","paginate","source","page","limit","where","order","data","total","Repository","findAndCount","skip","take","getManyAndCount","totalPages","Math","ceil"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBAZc;yBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWxC,IAAA,AAAMA,oBAAN,MAAMA;IACLC,SACJC,MAA6C,EAC7CC,OAAe,CAAC,EAChBC,QAAgB,EAAE,EAClBC,QAAa,CAAC,CAAC,EACfC,QAAa,CAAC,CAAC;eALjB,oBAAA;YAOE,IAAIC;YACJ,IAAIC;YAEJ,IAAIN,kBAAkBO,mBAAU,EAAE;gBAChC,CAACF,MAAMC,MAAM,GAAG,MAAMN,OAAOQ,YAAY,CAAC;oBACxCL;oBACAM,MAAM,AAACR,CAAAA,OAAO,CAAA,IAAKC;oBACnBQ,MAAMR;oBACNE;gBACF;YACF,OAAO;gBACL,CAACC,MAAMC,MAAM,GAAG,MAAMN,OACnBS,IAAI,CAAC,AAACR,CAAAA,OAAO,CAAA,IAAKC,OAClBQ,IAAI,CAACR,OACLS,eAAe;YACpB;YAEA,OAAO;gBACLN;gBACAC;gBACAL;gBACAC;gBACAU,YAAYC,KAAKC,IAAI,CAACR,QAAQJ;YAChC;QACF;;AACF"}