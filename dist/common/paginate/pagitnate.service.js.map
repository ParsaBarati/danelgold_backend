{"version":3,"sources":["../../../src/common/paginate/pagitnate.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { SelectQueryBuilder, Repository } from 'typeorm';\r\n\r\nexport interface PaginationResult<T> {\r\n  data: T[];\r\n  total: number;\r\n  page: number;\r\n  limit: number;\r\n  totalPages: number;\r\n}\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n  async paginate<T>(\r\n    source: Repository<T> | SelectQueryBuilder<T>,\r\n    page: number = 1,\r\n    limit: number = 10,\r\n    where: any = {},\r\n    order: any = {},\r\n  ): Promise<PaginationResult<T>> {\r\n    let data: T[];\r\n    let total: number;\r\n\r\n    if (source instanceof Repository) {\r\n      [data, total] = await source.findAndCount({\r\n        where,\r\n        skip: (page - 1) * limit,\r\n        take: limit,\r\n        order,\r\n      });\r\n    } else {\r\n      [data, total] = await source\r\n        .skip((page - 1) * limit)\r\n        .take(limit)\r\n        .getManyAndCount();\r\n    }\r\n\r\n    return {\r\n      data,\r\n      total,\r\n      page,\r\n      limit,\r\n      totalPages: Math.ceil(total / limit),\r\n    };\r\n  }\r\n}\r\n"],"names":["PaginationService","paginate","source","page","limit","where","order","data","total","Repository","findAndCount","skip","take","getManyAndCount","totalPages","Math","ceil"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBAZc;yBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWxC,IAAA,AAAMA,oBAAN,MAAMA;IACLC,SACJC,MAA6C,EAC7CC,OAAe,CAAC,EAChBC,QAAgB,EAAE,EAClBC,QAAa,CAAC,CAAC,EACfC,QAAa,CAAC,CAAC;eALjB,oBAAA;YAOE,IAAIC;YACJ,IAAIC;YAEJ,IAAIN,kBAAkBO,mBAAU,EAAE;gBAChC,CAACF,MAAMC,MAAM,GAAG,MAAMN,OAAOQ,YAAY,CAAC;oBACxCL;oBACAM,MAAM,AAACR,CAAAA,OAAO,CAAA,IAAKC;oBACnBQ,MAAMR;oBACNE;gBACF;YACF,OAAO;gBACL,CAACC,MAAMC,MAAM,GAAG,MAAMN,OACnBS,IAAI,CAAC,AAACR,CAAAA,OAAO,CAAA,IAAKC,OAClBQ,IAAI,CAACR,OACLS,eAAe;YACpB;YAEA,OAAO;gBACLN;gBACAC;gBACAL;gBACAC;gBACAU,YAAYC,KAAKC,IAAI,CAACR,QAAQJ;YAChC;QACF;;AACF"}