{"version":3,"sources":["../../../../src/common/utils/services/custom-logger-write.service.ts"],"sourcesContent":["// src/logger/my-logger.service.ts\r\n\r\nimport { Injectable, LoggerService } from '@nestjs/common';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n@Injectable()\r\nexport class MyLogger implements LoggerService {\r\n  private logFilePath = path.join(__dirname, '../logs/app.log');\r\n\r\n  log(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('LOG', message, ...optionalParams);\r\n  }\r\n\r\n  error(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('ERROR', message, ...optionalParams);\r\n  }\r\n\r\n  warn(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('WARN', message, ...optionalParams);\r\n  }\r\n\r\n  debug(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('DEBUG', message, ...optionalParams);\r\n  }\r\n\r\n  verbose(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('VERBOSE', message, ...optionalParams);\r\n  }\r\n\r\n  fatal(message: any, ...optionalParams: any[]) {\r\n    this.writeLog('FATAL', message, ...optionalParams);\r\n  }\r\n\r\n  private writeLog(level: string, message: any, ...optionalParams: any[]) {\r\n    const formattedMessage = this.formatLog(level, message, ...optionalParams);\r\n\r\n    console.log(formattedMessage);\r\n\r\n    this.appendLogToFile(formattedMessage);\r\n  }\r\n\r\n  private formatLog(\r\n    level: string,\r\n    message: any,\r\n    ...optionalParams: any[]\r\n  ): string {\r\n    const timestamp = new Date().toISOString();\r\n    return `${timestamp} [${level}] ${message} ${optionalParams.join(' ')}`;\r\n  }\r\n\r\n  private appendLogToFile(message: string) {\r\n    fs.appendFile(this.logFilePath, message + '\\n', (err) => {\r\n      if (err) {\r\n        console.error('Failed to write log to file:', err);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"names":["MyLogger","log","message","optionalParams","writeLog","error","warn","debug","verbose","fatal","level","formattedMessage","formatLog","console","appendLogToFile","timestamp","Date","toISOString","join","fs","appendFile","logFilePath","err","path","__dirname"],"mappings":"AAAA,kCAAkC;;;;;+BAOrBA;;;eAAAA;;;wBAL6B;4DACtB;8DACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGf,IAAA,AAAMA,WAAN,MAAMA;IAGXC,IAAIC,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC1C,IAAI,CAACC,QAAQ,CAAC,OAAOF,YAAYC;IACnC;IAEAE,MAAMH,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC5C,IAAI,CAACC,QAAQ,CAAC,SAASF,YAAYC;IACrC;IAEAG,KAAKJ,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC3C,IAAI,CAACC,QAAQ,CAAC,QAAQF,YAAYC;IACpC;IAEAI,MAAML,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC5C,IAAI,CAACC,QAAQ,CAAC,SAASF,YAAYC;IACrC;IAEAK,QAAQN,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC9C,IAAI,CAACC,QAAQ,CAAC,WAAWF,YAAYC;IACvC;IAEAM,MAAMP,OAAY,EAAE,GAAGC,cAAqB,EAAE;QAC5C,IAAI,CAACC,QAAQ,CAAC,SAASF,YAAYC;IACrC;IAEQC,SAASM,KAAa,EAAER,OAAY,EAAE,GAAGC,cAAqB,EAAE;QACtE,MAAMQ,mBAAmB,IAAI,CAACC,SAAS,CAACF,OAAOR,YAAYC;QAE3DU,QAAQZ,GAAG,CAACU;QAEZ,IAAI,CAACG,eAAe,CAACH;IACvB;IAEQC,UACNF,KAAa,EACbR,OAAY,EACZ,GAAGC,cAAqB,EAChB;QACR,MAAMY,YAAY,IAAIC,OAAOC,WAAW;QACxC,OAAO,CAAC,EAAEF,UAAU,EAAE,EAAEL,MAAM,EAAE,EAAER,QAAQ,CAAC,EAAEC,eAAee,IAAI,CAAC,KAAK,CAAC;IACzE;IAEQJ,gBAAgBZ,OAAe,EAAE;QACvCiB,IAAGC,UAAU,CAAC,IAAI,CAACC,WAAW,EAAEnB,UAAU,MAAM,CAACoB;YAC/C,IAAIA,KAAK;gBACPT,QAAQR,KAAK,CAAC,gCAAgCiB;YAChD;QACF;IACF;;aAjDQD,cAAcE,MAAKL,IAAI,CAACM,WAAW;;AAkD7C"}