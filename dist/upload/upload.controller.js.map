{"version":3,"sources":["../../src/upload/upload.controller.ts"],"sourcesContent":["import {UploadService} from './upload.service';\r\nimport {\r\n    Body,\r\n    Controller,\r\n    DefaultValuePipe,\r\n    Delete,\r\n    Get,\r\n    HttpStatus,\r\n    NotFoundException,\r\n    Param,\r\n    ParseFilePipeBuilder,\r\n    ParseIntPipe,\r\n    Post,\r\n    Query,\r\n    Req,\r\n    Res,\r\n    UploadedFile,\r\n    UploadedFiles,\r\n    UseInterceptors,\r\n} from '@nestjs/common';\r\nimport {FileInterceptor, FilesInterceptor} from '@nestjs/platform-express';\r\nimport path from 'path';\r\nimport {Request, Response} from 'express';\r\nimport {Public} from '@/common/decorators/public.decorator';\r\nimport {ApiOkResponse, ApiOperation, ApiQuery, ApiTags} from '@nestjs/swagger';\r\n\r\n@ApiTags('Uploads')\r\n@Controller('upload')\r\nexport class UploadController {\r\n    constructor(private readonly uploadService: UploadService) {\r\n    }\r\n\r\n    @ApiOperation({summary: 'Upload Multiple Files in Bulk'})\r\n    @Post('bulk')\r\n    @UseInterceptors(FilesInterceptor('files'))\r\n    async createUploads(\r\n        @UploadedFiles(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 500 * 1024 * 1024, // 500MB max file size\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        ) files: Express.Multer.File[],\r\n    ) {\r\n        return await this.uploadService.createUploads(files);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Upload Single File'})\r\n    @Post()\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .build(),\r\n        ) file: Express.Multer.File,\r\n    ) {\r\n        console.log('Here!!!!!');\r\n        return await this.uploadService.createUpload(file);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Upload Reel'})\r\n    @Post('Reel')\r\n    @ApiOperation({summary: 'Upload a new reel'})\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async uploadReel(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({maxSize: 50 * 1024 * 1024}) // Adjust max file size for videos\r\n                .build({errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY}),\r\n        ) file: Express.Multer.File,\r\n        @Body('caption') caption: string,\r\n        @Req() req\r\n    ) {\r\n        return this.uploadService.uploadReel(file, caption, (req.uesr as any));\r\n    }\r\n\r\n    @ApiOperation({summary: 'Upload Profile Picture'})\r\n    @Post('profile-pic')\r\n    @UseInterceptors(FileInterceptor('file'))\r\n    async createProfilePictureUpload(\r\n        @UploadedFile(\r\n            new ParseFilePipeBuilder()\r\n                .addMaxSizeValidator({\r\n                    maxSize: 5 * 1024 * 1024, // 5MB max file size\r\n                })\r\n                .build({\r\n                    errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n                }),\r\n        ) file: Express.Multer.File,\r\n        @Req() req: Request,\r\n    ) {\r\n        return await this.uploadService.createProfilePictureUpload(file, req.user as any);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Get All Uploads with Filtering Options'})\r\n    @ApiQuery({name: 'page', required: false, example: 1, description: 'Page number for pagination'})\r\n    @ApiQuery({name: 'limit', required: false, example: 10, description: 'Number of items per page'})\r\n    @ApiQuery({name: 'search', required: false, description: 'Search term to filter uploads'})\r\n    @ApiQuery({name: 'sort', required: false, description: 'Sort by a specific field', example: 'id'})\r\n    @ApiQuery({name: 'sortOrder', required: false, description: 'Order of sorting', example: 'DESC'})\r\n    @Get('all')\r\n    async getAllUploads(\r\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n        @Query('search') search?: string,\r\n        @Query('sort', new DefaultValuePipe('id')) sort?: string,\r\n        @Query('sortOrder', new DefaultValuePipe('DESC')) sortOrder?: string,\r\n    ) {\r\n        const query = {page, limit, search, sort, sortOrder};\r\n        return this.uploadService.getAllUploads(query);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Delete an Upload by ID'})\r\n    @ApiOkResponse({description: 'Upload deleted successfully'})\r\n    @Delete(':id')\r\n    async deleteUpload(@Param('id', ParseIntPipe) id: number) {\r\n        return this.uploadService.deleteUpload(id);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Delete Multiple Uploads'})\r\n    @ApiQuery({name: 'delete', description: 'Comma-separated list of IDs to delete'})\r\n    @Delete()\r\n    async deleteMultipleUploads(@Query('delete') ids: string) {\r\n        const idArray = ids.split(',').map((id) => parseInt(id, 10));\r\n        return this.uploadService.deleteMultipleUploads(idArray);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Get File by Path'})\r\n    @Public()\r\n    @Get('/path/:filePath')\r\n    async getByPath(@Param('filePath') filePath: string, @Res() res: Response) {\r\n        const filePathClean = path.normalize(filePath).replace(/\\\\/g, '/');\r\n        const file = await this.uploadService.getUploadByPath(filePathClean);\r\n        if (!file) {\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const absolutePath = path.resolve(__dirname, '..', '..', file.result);\r\n        res.sendFile(absolutePath);\r\n    }\r\n\r\n    @ApiOperation({summary: 'Get Upload by ID'})\r\n    @Get(':id')\r\n    async getUploadById(\r\n        @Param(\r\n            'id',\r\n            new ParseIntPipe({\r\n                errorHttpStatusCode: HttpStatus.BAD_REQUEST,\r\n            }),\r\n        ) uploadId: number,\r\n    ) {\r\n        return await this.uploadService.getUploadById(uploadId);\r\n    }\r\n}\r\n"],"names":["UploadController","createUploads","files","uploadService","createUpload","file","console","log","uploadReel","caption","req","uesr","createProfilePictureUpload","user","getAllUploads","page","limit","search","sort","sortOrder","query","deleteUpload","id","deleteMultipleUploads","ids","idArray","split","map","parseInt","getByPath","filePath","res","filePathClean","path","normalize","replace","getUploadByPath","NotFoundException","absolutePath","resolve","__dirname","result","sendFile","getUploadById","uploadId","constructor","summary","ParseFilePipeBuilder","addMaxSizeValidator","maxSize","build","errorHttpStatusCode","HttpStatus","UNPROCESSABLE_ENTITY","name","required","example","description","DefaultValuePipe","ParseIntPipe","BAD_REQUEST"],"mappings":"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"}